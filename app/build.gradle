import com.android.build.api.transform.*
import com.android.build.gradle.internal.pipeline.TransformManager
import org.apache.commons.codec.digest.DigestUtils

apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.multidextest"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // 规避 64K 方法限制
    implementation 'com.android.support:multidex:1.0.3'
    implementation project(':login')
    implementation project(':order')
}

afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        def listFile = project.rootDir.absolutePath+'/app/maindexlist.txt'
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        //表示当方法数越界时则生成多个dex文件（我的没有越界，貌似也生成了两个）
        dx.additionalParameters += '--multi-dex'
        //这个指定了listFile中的类（即maindexlist.txt中的类）会打包到主dex中，不过注意下一条。
        dx.additionalParameters += '--main-dex-list=' +listFile
        //表明只有-main-dex-list所指定的类（在我的配置中，就是app目录下的maindexlist.txt中包含的类）才能打包到主dex中，如果没有这个选项，上个选项就会失效
        dx.additionalParameters += '--minimal-main-dex'
    }
}

class MyClassTransform extends Transform {

    MyClassTransform() {}

    @Override
    String getName() {
        return "MyClassTransform"
    }

    @Override
    Set<QualifiedContent.ContentType> getInputTypes() {
        return TransformManager.CONTENT_CLASS
    }

    @Override
    Set<QualifiedContent.Scope> getScopes() {
        return TransformManager.SCOPE_FULL_PROJECT
    }

    @Override
    boolean isIncremental() {
        return false
    }

    @Override
    void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException {
        Collection<TransformInput> inputs = transformInvocation.getInputs()
        Collection<TransformInput> referenceInputs = transformInvocation.getReferencedInputs()
        TransformOutputProvider outPutProvider = transformInvocation.getOutputProvider()

        println inputs
        inputs.each {
            TransformInput transformInput ->
                transformInput.directoryInputs.each {
                    it ->
                        def dest = outPutProvider.getContentLocation(it.name, it.contentTypes, it.scopes, Format.DIRECTORY)
                        println "FileSource====" + it.file.absolutePath
                }

                transformInput.jarInputs.each {
                    it ->
                        def jarName = it.name
                        def md5Name = DigestUtils.md5Hex(it.file.absolutePath)
                        if (jarName.endsWith(".jar")) {
                            jarName = jarName.substring(0, jarName.length() - 4)
                        }
                        def dest = outPutProvider.getContentLocation(jarName + md5Name, it.contentTypes, it.scopes, Format.JAR)
                        println "JarSource====" + it.file.absolutePath
                }
        }
    }
}

//android.registerTransform(new MyClassTransform())
